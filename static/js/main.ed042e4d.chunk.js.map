{"version":3,"sources":["Home/Images/homeBgCropS1.jpg","MenuResponsive/MenuResponsive.js","Home/Home.js","AboutMe/AboutMe.js","Projects/Projects.js","Contact/Contact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","MenuResponsive","react_default","a","createElement","rel","href","class","id","Link","to","onclick","Home","src","HomeBg","alt","AboutMe","Projects","Contact","App","HashRouter","className","MenuResponsive_MenuResponsive","Route","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mVCKzB,SAASC,IACpB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,IAAI,aAAaC,KAAK,uFAC5BJ,EAAAC,EAAAC,cAAA,OAAKG,MAAM,SAASC,GAAG,YACnBN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,KAAT,QACAR,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,YAAT,YACAR,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,aAAT,YACAR,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,YAAT,WACAR,EAAAC,EAAAC,cAAA,KAAGE,KAAK,sBAAsBC,MAAM,OAAOI,QAAQ,gBAC/CT,EAAAC,EAAAC,cAAA,KAAGG,MAAM,6CCXd,SAASK,IACpB,OACIV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,oFACAF,EAAAC,EAAAC,cAAA,OAAKS,IAAKC,IAAQC,IAAI,WCPvB,SAASC,IACpB,OACQd,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,sBCHA,SAASa,IACpB,OACQf,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,uBCHA,SAASc,IACpB,OACQhB,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,0BCwBAe,mLAhBX,OACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,OACbnB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,YACbnB,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWd,IACjCV,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWV,IACxCd,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWT,IACzCf,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWR,cAVlCS,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ed042e4d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/homeBgCropS1.db94a951.jpg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../MenuResponsive/MenuResponsive.css';\nimport '../MenuResponsive/MyFunction'\n\nexport default function MenuResponsive() {\n    return (\n        <div>\n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"></link>\n            <div class=\"topnav\" id=\"myTopnav\">\n                <Link to='/'>Home</Link>\n                <Link to='/aboutme'>About Me</Link>\n                <Link to='/projects'>Projects</Link>\n                <Link to='/contact'>Contact</Link>\n                <a href=\"javascript:void(0);\" class=\"icon\" onclick=\"myFunction()\">\n                    <i class=\"fa fa-bars\"></i>\n                </a>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport '../Home/Home.css';\nimport HomeBg from './Images/homeBgCropS1.jpg';\n\nexport default function Home() {\n    return (\n        <div>\n            <div>\n                <h3>Hello, my name is Rafael. I am a Web Developer liviving in London, UK.</h3>\n                <img src={HomeBg} alt=\"Home\" />\n            </div>\n        </div>\n    )\n}","import React from 'react';\n\nexport default function AboutMe() {\n    return (\n            <div>\n               <h3>AboutMe</h3>\n            </div>\n    )\n}","import React from 'react';\n\nexport default function Projects() {\n    return (\n            <div>\n               <h3>Projects</h3>\n            </div>\n    )\n}","import React from 'react';\n\nexport default function Contact() {\n    return (\n            <div>\n               <h3>Contact</h3>\n            </div>\n    )\n}","import React, { Component } from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport './App.css';\nimport Menu from './Menu/Menu';\nimport MenuResponsive from './MenuResponsive/MenuResponsive'\nimport Home from './Home/Home.js';\nimport AboutMe from './AboutMe/AboutMe';\nimport Projects from './Projects/Projects';\nimport Contact from './Contact/Contact';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"App\">\n          <div className=\"App-body\">\n            <MenuResponsive />\n            <Route exact path='/' component={Home} />\n            <Route exact path='/aboutme' component={AboutMe} />\n            <Route exact path='/projects' component={Projects} />\n            <Route exact path='/contact' component={Contact} />\n          </div>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}